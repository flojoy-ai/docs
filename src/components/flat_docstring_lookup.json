{
    "ARRAY_VIEW": "The ARRAY_VIEW node takes OrderedPair, DataFrame, Matrix, and Image DataContainer objects as input, and visualizes it in array format.",
    "TEXT_VIEW": "The TEXT_VIEW node creates a text visualization for a given TextBlob DataContainer type.",
    "MATRIX_VIEW": "The MATRIX_VIEW node takes a Matrix or OrderedPair DataContainer object as input, and visualizes it using a Plotly table in matrix format.",
    "PROPHET_COMPONENTS": "The PROPHET_COMPONENTS node plots the components of the prophet model trained in the PROPHET_PREDICT node.",
    "SURFACE3D": "The SURFACE3D node creates a Plotly 3D Surface visualization for a given input DataContainer.",
    "BIG_NUMBER": "The BIG_NUMBER node generates a Plotly figure, displaying a big number with an optional prefix and suffix.",
    "IMAGE": "The IMAGE node creates a Plotly Image visualization for a given input DataContainer type of image.",
    "COMPOSITE": "The COMPOSITE node creates a combination of Plotly visualizations for a given input data container.",
    "SCATTER": "The SCATTER node creates a Plotly Scatter visualization for a given input DataContainer.",
    "LINE": "The LINE node creates a Plotly Line visualization for a given input DataContainer.",
    "TABLE": "The TABLE node creates a Plotly Table visualization for a given input DataContainer.",
    "SCATTER3D": "The SCATTER3D node creates a Plotly 3D Scatter visualization for a given input DataContainer.",
    "HEATMAP": "The HEATMAP node creates a Plotly Heatmap visualization for a given input DataContainer.",
    "BAR": "The BAR node creates a Plotly Bar visualization for a given input DataContainer.",
    "PROPHET_PLOT": "The PROPHET_PLOT node plots the forecasted trend of the time series data that was passed in.",
    "HISTOGRAM": "The HISTOGRAM node creates a Plotly Histogram visualization for a given input DataContainer.",
    "TRAIN_TEST_SPLIT": "",
    "SUPPORT_VECTOR_MACHINE": "",
    "ACCURACY": "",
    "ONE_HOT_ENCODING": "The ONE_HOT_ENCODING node creates a one hot encoding from a dataframe containing categorical features.",
    "TORCHSCRIPT_CLASSIFIER": "",
    "DEEPLAB_V3": "The DEEPLAB_V3 node returns a segmentation mask from an input image in a dataframe.",
    "ONNX_MODEL": "ONNX_MODEL loads a serialized ONNX model and uses it to make predictions using ONNX Runtime.",
    "COUNT_VECTORIZER": "The COUNT_VECTORIZER node receives a collection (matrix, vector or dataframe) of text documents and converts it to a matrix of token counts.",
    "OBJECT_DETECTION": "",
    "PROPHET_PREDICT": "The PROPHET_PREDICT node runs a Prophet model on the incoming dataframe.",
    "NLP_CONNECT_VIT_GPT2": "",
    "BART_LARGE_CNN": "",
    "LEAST_SQUARES": "The LEAST_SQUARE node computes the coefficients that minimize the distance between the inputs 'Matrix' or 'OrderedPair' class and the regression.",
    "HUGGING_FACE_PIPELINE": "The HUGGING_FACE_PIPELINE node uses a classification pipeline to process and classify an image.",
    "HOME": "",
    "SET_CART_LIN_VEL": "",
    "MOVE_POSE": "",
    "MOVE_JOINT": "",
    "ACTIVATE": "",
    "DISCONNECT": "",
    "DELAY": "",
    "CONNECT": "",
    "SET_JOINT_VEL": "",
    "MOVE_LIN": "",
    "OPEN_WEBCAM": "The OPEN_WEBCAM node opens a connection with the selected camera.",
    "WEBCAM": "The CAMERA node acquires an image using the selected camera.",
    "LINENGINEERING": "",
    "TINYMOVR": "",
    "TINYMOVR2": "",
    "ADAFRUIT": "",
    "TIC": "The STEPPER_DRIVER_TIC node controls a stepper motor's movement with a TIC driver.",
    "TIC_KNOB": "The STEPPER_DRIVER_TIC_KNOB controls a stepper motor's movement with a TIC driver.",
    "ZABER": "",
    "RETURN_ERRORS_33510B": "The RETURN_ERRORS_33510B node returns error messages from the WFG.",
    "BURST_MODE_33510B": "The BURST_MODE_33510B node is used to turn the Burst mode on or off.",
    "SET_WAVEFORM_33510B": "The SET_WAVEFORM_33510B node is used to set waveform settings for a 33510B.",
    "ON_OFF_33510B": "The ON_OFF_33510B node is used to turn the output on or off.",
    "CONNECTION_33510B": "The CONNECTION_33510B node connects Flojoy to a 33510B function generator.",
    "OUTPUT_SYNC_33510B": "The OUTPUT_SYNC_33510B node is used sync multiple outputs phases.",
    "WEINSCHEL8320": "The WEINSCHEL8320 node mocks the WEINSCHEL 8320 instrument, which attenuates the input signal.",
    "READ_N_PINS": "The READ_N_PINS node allows you to measure and output voltages from Flexiforce sensors using a Phidget InterfaceKit.",
    "COMING_FALL_2023": "",
    "READ_A0_PINS": "The READ_A0_PINS node allows you to record and return voltages from a sensor connected to a LABJACK U3 device.",
    "DC_CURRENT_USB4065": "The DC_CURRENT_USB4065 node reads the DC current from a USB-4065.",
    "AC_VOLTAGE_USB4065": "The AC_VOLTAGE_USB4065 node reads the AC voltage from a USB-4065.",
    "DIODE_USB4065": "The DIODE_USB4065 node reads the voltage drop across a diode.",
    "DC_VOLTAGE_USB4065": "The DC_VOLTAGE_USB4065 node reads the DC voltage from a USB-4065.",
    "RESISTANCE_USB4065": "The RESISTANCE_USB4065 node reads the two-wire resistance from a USB-4065.",
    "AC_CURRENT_USB4065": "The AC_CURRENT_USB4065 node reads the AC current from a USB-4065.",
    "CONNECTION_USB4065": "The CONNECTION_MDO3XXX node connects Flojoy to a",
    "CLOSE_ALL": "The CLOSE_ALL node closes all QCoDeS instruments and should be run at the start and end of each Flojoy app that uses QCoDeS.",
    "LIST_VISA": "The LIST_VISA node lists all VISA instruments available.",
    "VISA_IDENTITY": "The VISA_IDENTITY node send an identity query (\"*IDN?\") to the specified instrument.",
    "ATTENUATION_LDA602": "The ATTENUATION_LDA602 node sets or queries the attenuation for the LDA-602 Digital Attenuator.",
    "IV_SWEEP": "The IV_SWEEP node takes an I-V curve measurement with a Keithley 2400 source meter, send voltages, and measures currents.",
    "OPEN_KEITHLEY_24XX": "The OPEN_KEITHLEY_24XX node opens a connection with the Keithley 2400 source meter.",
    "SET_VOLTAGE": "",
    "ADVANCED_MEASUREMENTS_MDO3XXX": "The ADVANCED_MEASUREMENTS_MDO3XXX node extracts waveform measurements from an MDO3xxx oscilloscope.",
    "TRIGGER_SETTINGS_MDO3XXX": "The TRIGGER_SETTINGS_MDO3XXX node sets advanced trigger settings.",
    "TRIGGER_LEVEL_MDO3XXX": "The TRIGGER_LEVEL_MDO3XXX node sets the trigger voltage (or queries it).",
    "MEASUREMENTS_MDO3XXX": "The MEASUREMENTS_MDO3XXX node extracts waveform measurements from an MDO3XXX oscilloscope.",
    "TRIGGER_CHANNEL_MDO3XXX": "The TRIGGER_CHANNEL_MDO3XXX node sets the triggering channel (or queries it).",
    "TERMINATION_MDO3XXX": "The TERMINATION_MDO3XXX node sets the termination ohms (or queries it).",
    "CONNECTION_MDO3XXX": "The CONNECTION_MDO3XXX node connects Flojoy to a MDO3XXX oscilloscope.",
    "EXTRACT_TRACE_MDO3XXX": "The EXTRACT_TRACE_MDO3XXX node extracts the trace from an MDO3xxx oscilloscope.",
    "MEASURE_PHASE_MDO3XXX": "The MEASURE_PHASE_MDO3XXX node measures the phase between two channels.",
    "LM34": "The LM34 node allows you to convert voltages measured with a thermocouple (LM34) connected to a LabJack U3 device into temperatures.",
    "FLEXIFORCE_25LB": "The Flexiforce node allows you to convert voltages measured with the Phidget Interface Kit into pressures.",
    "RPI2040": "",
    "ESP32": "",
    "STM32": "",
    "CAN": "",
    "IDN": "The IDN node queries a device's identity through the universal *IDN? SCPI command.",
    "MEASURE_VOLTAGE": "The MEASURE_VOLTAGE node queries an instrument's measured output voltage, such as a DMM or power supply.",
    "VISA": "",
    "OPEN_SERIAL": "The OPEN_SERIAL node opens a serial connection through your computer's USB or RS-232 port.",
    "SERIAL_SINGLE_MEASUREMENT": "The SERIAL_SINGLE_MEASUREMENT node takes a single reading of data from an Arduino or a similar serial device.",
    "SERIAL_TIMESERIES": "The SERIAL_TIMESERIES node extracts simple time-dependent 1D data from an Arduino or a similar serial device.",
    "SINGLE_MEASUREMENT": "The SERIAL_SINGLE_MEASUREMENT node takes a single reading of data from an Ardunio or a similar serial device.",
    "INV": "",
    "DET": "",
    "EIGVALSH": "",
    "SLOGDET": "The SLOGDET node is based on a numpy or scipy function.",
    "EIG": "The EIG node is based on a numpy or scipy function.",
    "QR": "The QR node is based on a numpy or scipy function.",
    "SVD": "The SVD node is based on a numpy or scipy function.",
    "CHOLESKY": "",
    "PINV": "The PINV node is based on a numpy or scipy function.",
    "MATRIX_POWER": "",
    "EIGH": "",
    "EIGVALS": "",
    "TENSORINV": "",
    "CONDITIONAL": "The CONDITIONAL node is a specialized node that compares two given Scalar inputs.",
    "TIMER": "The TIMER node sleeps for a specified number of seconds.",
    "BREAK": "The BREAK node is designed to end the iteration of a loop.",
    "LOOP_INDEX": "The LOOP_INDEX node loads the loop index from the LOOP node.",
    "APPEND": "",
    "LOOP": "",
    "TEXT_CONCAT": "The TEXT_CONCAT node takes in two TextBlob DataContainer type and concatenates the text string.",
    "DF_2_NP": "The DF_2_NP node takes one dataframe type data and converts it to a matrix type data.",
    "DF_2_ORDERED_TRIPLE": "The DF_2_ORDERED_TRIPLE node converts a dataframe type data into an OrderedTriple type data.",
    "MAT_2_DF": "The MAT_2_DF node takes one matrix type data and converts it to a dataframe type data.",
    "VECTOR_2_ORDERED_PAIR": "The VECTOR_2_ORDERED_PAIR node returns the OrderedPair where x and y axes are the input nodes.",
    "NP_2_DF": "The NP_2_DF node converts numpy array data into dataframe type data.",
    "ORDERED_TRIPLE_2_SURFACE": "The ORDERED_TRIPLE_2_SURFACE node takes an \"OrderedTriple\" instance of the DataContainer class that contains three arrays: x, y, and z.",
    "SHUFFLE_VECTOR": "The SHUFFLE_VECTOR node returns a vector that is randomly shuffled",
    "VECTOR_LENGTH": "The VECTOR_LENGTH node returns the length of the input.",
    "DECIMATE_VECTOR": "The DECIMATE_VECTOR node returns the input vector by reducing the",
    "VECTOR_MIN": "The VECTOR_MIN node returns the minimum value from the Vector",
    "VECTOR_INSERT": "The VECTOR_INSERT node inserts a value to the Vector at the",
    "VECTOR_MAX": "The VECTOR_MAX node returns the maximum value from the Vector",
    "VECTOR_DELETE": "The VECTOR_DELETE node returns a new Vector with elements deleted from requested indices",
    "VECTOR_SUBSET": "The VECTOR_SUBSET node returns the subset of values from requested indices",
    "REMOVE_DUPLICATES_VECTOR": "The REMOVE_DUPLICATES_VECTOR node returns a vector with only unique elements",
    "SHIFT_VECTOR": "The SHIFT_VECTOR node shifts the elements in the vector by the amount specified",
    "SPLIT_VECTOR": "The SPLIT_VECTOR node returns a vector that is splited by a given index",
    "REPLACE_SUBSET": "The REPLACE_SUBSET node returns a new Vector with subset of elements replaced.",
    "INTERLEAVE_VECTOR": "The INTERLEAVE_VECTOR node combine multiple vectors",
    "SORT_VECTOR": "The SORT_VECTOR node returns the input Vector that is sorted",
    "REVERSE_VECTOR": "The REVERSE_VECTOR node returns the input vector where",
    "VECTOR_INDEXING": "The VECTOR_INDEXING node returns the value of the vector at the requested index.",
    "SHUFFLE_MATRIX": "The SHUFFLE_MATRIX node returns a matrix that is randomly shuffled by the first axis",
    "INVERT": "The INVERT node takes two inputs, one matrix and one rcond if not a square matrix, then inverts them (or pseudo invert) and returns the result.",
    "DOT_PRODUCT": "The DOT_PRODUCT node takes two input matrices, multiplies them (by dot product), and returns the result.",
    "MATMUL": "The MATMUL node takes two input matrices, multiplies them, and returns the result.",
    "SORT_MATRIX": "The SORT_MATRIX node takes a input matrix and sort it along the chosen axis.",
    "SELECT_ARRAY": "",
    "SUBTRACT": "The SUBTRACT node subtracts two numeric arrays, vectors, matrices, or constants element-wise and returns the result.",
    "MULTIPLY": "The MULTIPLY node multiplies two numeric arrays, vectors, matrices, or constants element-wise and returns the result.",
    "DIVIDE": "The DIVIDE node divides two or more numeric arrays, matrices, dataframes, or constants element-wise.",
    "ADD": "The ADD node adds two or more numeric arrays, matrices, dataframes, or constants element-wise.",
    "ABS": "The ABS node take a numeric array, a vector, or a scalar as input and returns its absolute value.",
    "DOUBLE_INDEFINITE_INTEGRAL": "The DOUBLE_INDEFINITE_INTEGRAL node takes an OrderedTriple (x,y,z) and has width and height parameters.",
    "INTEGRATE": "The INTEGRATE node takes a numpy array, a vector, or a matrix as input and integrates it using the composite trapezoidal rule.",
    "DIFFERENTIATE": "The DIFFERENTIATE node takes two lists, x and y, as input.",
    "DOUBLE_DEFINITE_INTEGRAL": "The DOUBLE_DEFINITE_INTEGRAL node takes a function, upper, and lower bounds as input.",
    "IFFT": "The IFFT node performs the Inverse Discrete Fourier Transform on the input signal.",
    "FIR": "",
    "PID": "The PID node acts like a PID function.",
    "BUTTER": "",
    "TWO_DIMENSIONAL_FFT": "The TWO_DIMENSIONAL_FFT node performs a two-dimensional fast fourier transform function on the input matrix.",
    "SAVGOL": "",
    "FFT": "",
    "ORDERED_PAIR_XY_INVERT": "The ORDERED_PAIR_XY_INVERT node returns the OrderedPair where the axes are inverted.",
    "CHANNEL_SPLIT": "The CHANNEL_SPLIT node returns the rgba channels of an image",
    "CHANNEL_MERGE": "The CHANNEL_MERGE node returns the merged rgba channels of an image.",
    "IMAGE_SMOOTHING": "",
    "EXTREMA_DETERMINATION": "The EXTREMA_DETERMINATION node is used to determine the peak in an image.",
    "REGION_PROPERTIES": "The image processing REGION_PROPERTIES node is a stand-alone visualizer for analyzing an input array of data.",
    "EDGE_DETECTION": "",
    "TEXT_DATASET": "The TEXT_DATASET node loads the 20 newsgroups dataset from scikit-learn.",
    "PLOTLY_DATASET": "",
    "SCIKIT_LEARN_DATASET": "The SCIKIT_LEARN_DATASET node retrieves a pandas DataFrame from",
    "R_DATASET": "The R_DATASET node retrieves a pandas DataFrame from 'rdatasets', using the provided dataset_key parameter, and returns it wrapped in a DataContainer.",
    "SKIMAGE": "The SKIMAGE node is designed to load example images from 'scikit-image'.",
    "TIMESERIES": "The TIMESERIES node generates a random timeseries vector (as a DataFrame).",
    "POPULATE": "The POPULATE node generates random numbers, depending on the distribution selected and the input data.",
    "SINE": "The SINE node generates a waveform function with the shape being defined by the input.",
    "UNIX_TIMESTAMP": "Return the current UNIX timestamp as a float (Scalar) or array (Vector) with length equal to 1.",
    "FEEDBACK": "",
    "CONSTANT": "The CONSTANT node generates a single x-y vector of numeric (floating point) constants.",
    "BASIC_OSCILLATOR": "The BASIC_OSCILLATOR node is a combination of the LINSPACE and SINE nodes.",
    "TEXT": "The TEXT node returns a TextBlob DataContainer.",
    "RAND": "The RAND node generates a random number or a list of random numbers, depending on the distribution selected.",
    "SECOND_ORDER_SYSTEM": "The SECOND_ORDER_SYSTEM has a second order exponential function.",
    "SCALAR": "The SCALAR node returns a single Scalar value.",
    "MATRIX": "The MATRIX node takes two arguments, 'row' and 'col', as input.",
    "LINSPACE": "The LINSPACE node generates data spaced evenly between two points.",
    "WAVEPACKET": "",
    "EXTRACT_COLUMNS": "The EXTRACT_COLUMNS node takes an input dataframe/matrix and returns a dataframe/matrix with only the specified columns.",
    "READ_S3": "The READ_S3 node takes a S3_key name, S3 bucket name, and file name as input, and extracts the file from the specified bucket using the S3_key that was saved.",
    "READ_CSV": "The READ_CSV node reads a .csv file from disk or a URL, and then returns a dataframe.",
    "OPEN_IMAGE": "The OPEN_IMAGE node loads an image file from disk and returns an image type DataContainer object.",
    "OPEN_PARQUET": "The OPEN_PARQUET node loads a local file of the .parquet file format. It then returns the file as a pandas.Dataframe type.",
    "PRINT_DATACONTAINER": "The PRINT_DATACONTAINER node returns a TextBlob containing input DataContainer information.",
    "DC_CONTENT_TYPE": "The DC_CONTENT_TYPE node returns a TextBlob containing the type of the input DataContainer's content.",
    "DATACONTAINER_TYPE": "The DATACONTAINER_TYPE node returns a TextBlob containing the input DataContainer type (e.g. Vector).",
    "LOCAL_FILE": "The LOCAL_FILE node loads a local file of a different type and converts it to a DataContainer class.",
    "BATCH_PROCESSOR": "The BATCH_PROCESSOR node is designed to glob match a pattern in the given input directory.",
    "OPEN_MATLAB": "The OPEN_MATLAB node loads a local file of the .mat file format.",
    "DS_LOAD": "The DS_LOAD node loads data directly from in-memory data storage.",
    "FLOJOY_CLOUD_UPLOAD": "The FLOJOY_CLOUD_UPLOAD node takes a DataContainer as input and uploads it to Flojoy Cloud.",
    "FLOJOY_CLOUD_DOWNLOAD": "The FLOJOY_CLOUD_DOWNLOAD node downloads a DataContainer from Flojoy Cloud.",
    "REMOTE_FILE": "The REMOTE_FILE node loads a remote file using an HTTP URL and converts it to a DataContainer class.",
    "SAVGOL_FILTER": "The SAVGOL_FILTER node is based on a numpy or scipy function.",
    "ARGRELMIN": "",
    "QUADRATIC": "",
    "DECIMATE": "",
    "BSPLINE": "",
    "KAISER_BETA": "",
    "GAUSS_SPLINE": "",
    "ARGRELMAX": "The ARGRELMAX node is based on a numpy or scipy function.",
    "WELCH": "The WELCH node is based on a numpy or scipy function.",
    "CUBIC": "",
    "PERIODOGRAM": "The PERIODOGRAM node is based on a numpy or scipy function.",
    "HILBERT": "",
    "DETREND": "The DETREND node is based on a numpy or scipy function.",
    "STFT": "The STFT node is based on a numpy or scipy function.",
    "BINOM_TEST": "",
    "TMAX": "The TMAX node is based on a numpy or scipy function.",
    "SKEW": "The SKEW node is based on a numpy or scipy function.",
    "GZSCORE": "",
    "BAYES_MVS": "",
    "SKEWTEST": "The SKEWTEST node is based on a numpy or scipy function.",
    "TRIMBOTH": "",
    "VARIATION": "The VARIATION node is based on a numpy or scipy function.",
    "MOMENT": "",
    "JARQUE_BERA": "The JARQUE_BERA node is based on a numpy or scipy function.",
    "SEM": "The SEM node is based on a numpy or scipy function.",
    "TRIM_MEAN": "The TRIM_MEAN node is based on a numpy or scipy function.",
    "TRIM1": "",
    "SIGMACLIP": "",
    "TMIN": "The TMIN node is based on a numpy or scipy function.",
    "DESCRIBE": "",
    "TTEST_1SAMP": "The TTEST_1SAMP node is based on a numpy or scipy function.",
    "GSTD": "",
    "KURTOSIS": "",
    "SHAPIRO": "The SHAPIRO node is based on a numpy or scipy function.",
    "ANDERSON": "",
    "ZSCORE": "The ZSCORE node is based on a numpy or scipy function.",
    "KURTOSISTEST": "",
    "YEOJOHNSON": "",
    "NORMALTEST": "The NORMALTEST node is based on a numpy or scipy function.",
    "MVSDIST": "The MVSDIST node is based on a numpy or scipy function."
}