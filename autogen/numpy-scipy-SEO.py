import inspect
import docstring_parser as parse
import os
import re
import scipy
import numpy as np


def line_prepender(filename, newtext):
    """This function adds text at the start of a file."""
    with open(filename, "r+") as fp:
        lines = fp.readlines()
        lines.insert(0, newtext)
        fp.seek(0)
        fp.writelines(lines)


def replace_seo(filename, newtext):
    """This function replaces the SEO function between
    the '---' lines with the new section.
    """
    with open(filename, "r+") as fp:
        lines = fp.read()
        new = re.sub(rf"{lines[:4]}.*{lines[:4]}", "", lines, count=1, flags=re.S)
        fp.seek(0)
        fp.truncate(0)
        fp.seek(0)
        fp.writelines(new)

    line_prepender(filename, newtext)


MODULES_TO_SCRAPE = {
    "scipy": [scipy.signal, scipy.stats],
    "numpy": [np.linalg],
}

dirs = ["SCIPY/STATS", "SCIPY/SIGNAL", "NUMPY/LINALG"]
stats_link = "https://docs.scipy.org/doc/scipy/reference/stats.html"
linalg_link = "https://numpy.org/doc/stable/reference/routines.linalg.html"
signal_link = "https://docs.scipy.org/doc/scipy/reference/signal.html"

nodes = []
for i in dirs:
    nodes += next(os.walk("docs/nodes/" + i))[1]

# Used for generating SEO section at the top of numpy/scipy doc files (.md).
# Will not replace the current SEO section (remove it to renew).
for module in MODULES_TO_SCRAPE.keys():
    for submodule in MODULES_TO_SCRAPE[module]:
        submodule_name = submodule.__name__.split(".")[-1]
        # Use inspect to function params, arg names, etc.
        for name, func in inspect.getmembers(submodule, inspect.isfunction):
            if func.__name__.upper() in nodes:
                seo = "---\n"
                seo += "title: Autogenerated Flojoy node for "
                seo += f"{submodule.__name__}.{func.__name__}\n"

                doc = parse.parse_from_object(func)
                if doc.long_description is None:
                    description = doc.short_description
                else:
                    description = doc.short_description + " " + doc.long_description
                description = description.replace("\n", " ")
                seo += f"description: {description}\n"

                seo += "keywords: "
                if module == "numpy":
                    keywords = [
                        "numpy",
                        "linear algerbra",
                        "linalg",
                        "np.linalg",
                        "numpy.linalg",
                    ]
                    keywords.append(f"{submodule.__name__}.{func.__name__}")
                    keywords = str(keywords).replace("'", "")
                    keywords = keywords.replace('"', "")
                    seo += keywords
                    seo += "\n"
                elif module == "scipy":
                    keywords = [
                        "scipy",
                        "statistics",
                        "signal processing",
                        "scipy.stats",
                        "scipy.signal",
                    ]
                    keywords.append(f"{submodule.__name__}.{func.__name__}")
                    keywords = str(keywords).replace("'", "")
                    keywords = keywords.replace('"', "")
                    seo += keywords
                    seo += "\n"

                seo += "image: "
                if submodule.__name__ == "scipy.stats":
                    seo += stats_link
                if submodule.__name__ == "scipy.signal":
                    seo += signal_link
                if submodule.__name__ == "numpy.linalg":
                    seo += linalg_link
                seo += "\n---\n"

                md_path = f"docs/nodes/{module.upper()}/"
                md_path += f"{submodule_name.upper()}/"
                md_path += f"{func.__name__.upper()}/"
                md_path += f"{func.__name__.upper()}.md"

                if os.path.isfile(md_path):
                    with open(md_path) as f:
                        first_line = f.readline()
                    if first_line != "---\n":
                        line_prepender(md_path, seo)
                    else:
                        replace_seo(md_path, seo)
