import random
import numpy as np
from flojoy import flojoy, Scalar, Vector, display, DataContainer
from typing import Literal, Optional


@flojoy
def RAND(
    default: Optional[DataContainer] = None,
    distribution: Literal["normal", "uniform", "poisson"] = "normal",
    size: int = 1000,
    lower_bound: float = 0,
    upper_bound: float = 1,
    normal_mean: float = 0,
    normal_standard_deviation: float = 1,
    poisson_events: float = 1,
) -> Vector | Scalar:
    

    assert size >= 1, "Size must be greater than or equal to than 1"

    if upper_bound < lower_bound:
        upper_bound, lower_bound = lower_bound, upper_bound

    seed = random.randint(1, 10000)
    my_generator = np.random.default_rng(seed)

    match distribution:
        case "uniform":
            y = my_generator.uniform(low=lower_bound, high=upper_bound, size=size)
        case "normal":
            y = my_generator.normal(
                loc=normal_mean, scale=normal_standard_deviation, size=size
            )
        case "poisson":
            y = my_generator.poisson(lam=poisson_events, size=size)

    if size > 1:
        return Vector(v=y)

    return Scalar(c=float(y[0]))


@display
def OVERLOAD(size, lower_bound, upper_bound, distribution="uniform") -> None:
    return None


@display
def OVERLOAD(
    size, normal_mean, normal_standard_deviation, distribution="normal"
) -> None:
    return None


@display
def OVERLOAD(size, poisson_events, distribution="poisson") -> None:
    return None
