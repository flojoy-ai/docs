import pandas as pd
from flojoy import flojoy, DataFrame, DataContainer
from prophet import Prophet
from typing import TypedDict
from prophet.serialize import model_to_json


class ProphetPredictOutput(TypedDict):
    dataframe: DataFrame
    prophet_data: DataContainer


@flojoy(deps={"prophet": "1.1.4", "holidays": "0.26", "pystan": "2.19.1.1"})
def PROPHET_PREDICT(
    default: DataFrame, run_forecast: bool = True, periods: int = 365
) -> ProphetPredictOutput:
    

    df = default.m
    first_col = df.iloc[:, 0]
    if not pd.api.types.is_datetime64_any_dtype(first_col):
        raise ValueError(
            "First column must be of datetime type data for PROPHET_PREDICT!"
        )
    df.rename(
        columns={df.columns[0]: "ds", df.columns[1]: "y"}, inplace=True
    )  # PROPHET model expects first column to be `ds` and second to be `y`
    model = Prophet()
    model.fit(df)
    extra = {"prophet": model_to_json(model), "run_forecast": run_forecast}
    # If run_forecast, the return df is the forecast, otherwise the original
    return_df = df.copy()
    if run_forecast:
        future = model.make_future_dataframe(periods)
        forecast = model.predict(future)
        extra["original"] = df
        return_df = forecast
    return ProphetPredictOutput(
        dataframe=DataFrame(df=return_df), prophet_data=DataContainer(extra=extra)
    )
