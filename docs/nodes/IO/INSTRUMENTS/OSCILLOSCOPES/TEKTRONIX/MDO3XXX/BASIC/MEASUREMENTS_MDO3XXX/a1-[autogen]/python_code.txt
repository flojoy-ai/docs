from flojoy import flojoy, DataContainer, Scalar, VisaConnection
from typing import Optional, Literal


@flojoy(inject_connection=True)
def MEASUREMENTS_MDO3XXX(
    connection: VisaConnection,
    channel: int = 0,
    measurement: Literal["period", "frequency", "amplitude"] = "period",
    statistic: Literal["instant", "mean", "max", "min", "stdev"] = "instant",
    default: Optional[DataContainer] = None,
) -> Scalar:
    

    tek = connection.get_handle()

    tek.measurement[0].source1(f"CH{int(channel + 1)}")

    match measurement:
        case "frequency":
            chan = tek.measurement[0].source1()
            if statistic == "instant":
                value = tek.measurement[0].frequency()
            else:
                value = getattr(tek.measurement[0].frequency, statistic)
                value = value()
            unit = tek.measurement[0].frequency.unit
            print(f"Frequency of signal at channel {chan}: {value:.2E} {unit}")

        case "period":
            chan = tek.measurement[0].source1()
            if statistic == "instant":
                value = tek.measurement[0].period()
            else:
                value = getattr(tek.measurement[0].period, statistic)
                value = value()
            unit = tek.measurement[0].period.unit
            print(f"Period of signal at channel {chan}: {value:.2E} {unit}")

        case "amplitude":
            chan = tek.measurement[0].source1()
            if statistic == "instant":
                value = tek.measurement[0].amplitude()
            else:
                value = getattr(tek.measurement[0].amplitude, statistic)
                value = value()
            unit = tek.measurement[0].amplitude.unit
            print(f"Amplitude of signal at channel {chan}: {value:.2E} {unit}")

    return Scalar(c=value)
