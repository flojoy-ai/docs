from flojoy import flojoy, DataContainer, TextBlob, VisaConnection
from typing import Optional, Literal


@flojoy(inject_connection=True)
def SET_WAVEFORM_33510B(
    connection: VisaConnection,
    on_off: Literal["ON", "OFF"] = "OFF",
    query_set: Literal["query", "set"] = "query",
    channel: Literal["ch1", "ch2"] = "ch1",
    waveform: Literal[
        "SIN", "SQU", "TRI", "RAMP", "PULS", "PRBS", "NOIS", "ARB", "DC"
    ] = "SIN",
    frequency: float = 1e6,
    amplitude: float = 0.1,
    amplitude_unit: Literal["VPP", "VRMS", "DBM"] = "VPP",
    phase: float = 0,
    offset: float = 0,
    ramp_symmetry: float = 50,
    pulse_width: float = 20,
    default: Optional[DataContainer] = None,
) -> TextBlob:
    

    ks = connection.get_handle()

    channel_str = channel
    channel = getattr(ks, channel)

    if on_off == "OFF":
        channel.output("OFF")

    match query_set:
        case "set":
            assert (
                -360.0 <= phase <= 360.0
            ), "The phase must be between -360 and 360 degrees."
            assert (
                0.0 <= ramp_symmetry <= 100.0
            ), "The ramp_symmetry must be between -0 and 100."
            assert (
                pulse_width >= 16
            ), "The pulse_width must be greater than or equal to 16 ns"

            channel.function_type(waveform)
            channel.amplitude_unit(amplitude_unit)
            channel.amplitude(amplitude)
            channel.phase(phase)
            channel.offset(offset)
            channel.frequency(frequency)
            if waveform == "RAMP":
                channel.ramp_symmetry(ramp_symmetry)
            if waveform == "PULS":
                channel.pulse_width(pulse_width)

            summary = f"{channel_str}: {waveform}, amplitude: {amplitude} "
            summary += f"{amplitude_unit}, frequency: {frequency} Hz"

        case "query":
            summary = f"{channel_str}: "
            waveform = channel.function_type()
            summary += f"waveform: {waveform}, \n"
            amplitude_unit = channel.amplitude_unit()
            amplitude = channel.amplitude()
            summary += f"amplitude: {amplitude} {amplitude_unit}, \n"
            frequency = channel.frequency()
            summary += f"frequency: {frequency} Hz, \n"
            phase = channel.phase()
            summary += f"phase: {phase}, \n"
            offset = channel.offset()
            summary += f"offset: {offset} V, \n"
            if waveform == "RAMP":
                channel.ramp_symmetry(ramp_symmetry)
                summary += f"ramp_symmetry: {ramp_symmetry}%, \n"
            if waveform == "PULS":
                channel.pulse_width(pulse_width)
                summary += f"pulse_width: {pulse_width}, \n"

    if on_off == "ON":
        channel.output("ON")

    return TextBlob(text_blob=summary)
