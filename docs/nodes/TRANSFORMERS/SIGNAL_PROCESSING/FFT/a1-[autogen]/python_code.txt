from scipy import signal, fft
from numpy import abs
from flojoy import flojoy, DataContainer


@flojoy
def FFT(dc_inputs: list[DataContainer], params: dict) -> DataContainer:
    
    if len(dc_inputs) != 1:
        raise ValueError(
            f"FFT node requires 1 input signal, but {len(dc_inputs)} was given!"
        )
    dc = dc_inputs[0]
    if dc.type != "ordered_pair":
        raise ValueError(
            f"unsupported DataContainer type passed to FFT node: '{dc.type}'"
        )

    window_type: str = params["window_type"]
    real: bool = params["real_signal"]
    sample_rate: int = params["sample_rate"]  # Hz

    if sample_rate <= 0:
        raise ValueError(f"Sample rate must be greater than 0")

    signal_value = dc.y
    x = dc.x

    if window_type == "none":
        fourier = fft.rfft(signal_value) if real else fft.fft(signal_value)
    else:
        window = signal.get_window(window_type, len(signal_value))
        fourier = (
            fft.rfft(signal_value * window) if real else fft.fft(signal_value * window)
        )

    fourier = fft.fftshift(fourier)
    frequency = (
        fft.rfftfreq(x.shape[-1], 1 / sample_rate) if real else fft.fftfreq(x.shape[-1])
    )
    frequency = fft.fftshift(frequency)

    result = abs(fourier)
    return DataContainer(x=frequency, y=result)
