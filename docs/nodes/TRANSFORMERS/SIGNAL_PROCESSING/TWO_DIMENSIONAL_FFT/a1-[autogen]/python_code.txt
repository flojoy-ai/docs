from scipy import fft
from flojoy import flojoy, DataFrame, Matrix, Image, Grayscale
from typing import Literal
from PIL import Image as PillowImage
import pandas as pd
import numpy as np


def extrapolate(x):
    return (x - x.min()) / (x.max() - x.min())


@flojoy
def TWO_DIMENSIONAL_FFT(
    default: Grayscale | DataFrame | Image | Matrix,
    real_signal: bool = True,
    color: Literal["red", "green", "blue", "grayscale"] = "red",
) -> Matrix | DataFrame | Image:
    
    match default:
        case Grayscale() | Matrix():
            input = default.m
            fourier = fft.rfft2(input) if real_signal else fft.fft2(input)
            if isinstance(default, Matrix):
                fourier = fourier.real
                return Matrix(m=fourier)
        case DataFrame():
            input: pd.DataFrame = pd.DataFrame(default.m)
            fourier = fft.rfft2(input) if real_signal else fft.fft2(input)
            fourier = fourier.real
            result = pd.DataFrame(columns=fourier.columns, index=fourier.index)
            return DataFrame(df=result)
        case Image():
            red = default.r
            green = default.g
            blue = default.b
            alpha = default.a
            if color == "grayscale":
                if alpha is None:
                    rgba_image = np.stack((red, green, blue), axis=2)
                else:
                    rgba_image = np.stack((red, green, blue, alpha), axis=2)
                try:
                    image = PillowImage.fromarray(rgba_image)
                except TypeError:
                    image = PillowImage.fromarray((rgba_image * 255).astype(np.uint8))
                image = image.convert("L")
                grayscale = np.array(image)
                fourier = fft.rfft2(grayscale) if real_signal else fft.fft2(grayscale)
            else:
                fourier = (
                    fft.rfft2(locals()[color], axes=[0, 1])
                    if real_signal
                    else fft.fft2(locals()[color], axes=[0, 1])
                )

    fourier = np.log10(np.abs(fourier))
    fourier = extrapolate(fourier)
    return Image(r=fourier, g=fourier, b=fourier, a=None)
